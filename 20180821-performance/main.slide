Performance optimization in Go

Taco de Wolff
tacodewolff [at] gmail.com
github.com/tdewolff

: Slow program? Must have a loop.
: Author of minify
: Not about O-notation


* Outline

1. Strings vs. bytes
2. Benchmarking
3. PProf
4. Escape analysis
5. Function inlining
6. Bounds check elimination


* Performance optimization

- Do less work!

: Lower precision
: More optimal algorithm


* Performance optimization

- Do less work!
- Use branch prediction and cache locality to your advantage


* Strings vs. bytes

What's the difference?

    s := "string 本"
    b := []byte("bytes 本")

: String literals are UTF-8
: Range loop over strings returns its runes
: Strings are immutable
: Bytes have a capacity
: Copy necessary when converting!


* Strings vs. bytes

	type slice struct {
		data uintptr
		len int
		cap int
	}

	type string struct {
		data uintptr
		len int
	}

- Byte slices allows more fine-grained control of memory


* Byte allocation

What's the difference?

    b1 := []byte{}
    b2 := []byte("")

: b1 allocates nothing
: b2 allocates 8 bytes


* Set capacity on returned bytes!

.play word.go /START OMIT/,/END OMIT/

: Forgetting to set capacity will overwrite original slice


* Set capacity on returned bytes!

.play word_cap.go /START OMIT/,/END OMIT/


* Benchmarking

Idiomatic way for performance measurements

foo_test.go

    package foo

    import "testing"

    func BenchmarkTest(b *testing.B) {
        for i := 0; i < b.N; i++ {
            // subject
        }
    }

Run as:

    $ go test -bench=. -benchmem


* Benchmarking example

.code strings_test.go /START OMIT/,/END OMIT/

* Benchmarking example output

    $ go test -bench=. -benchmem
    goos: linux
    goarch: amd64
    pkg: github.com/tdewolff/talks/20180821-performance
    BenchmarkStrings-8               1000000         31143 ns/op      503992 B/op          1 allocs/op
    BenchmarkStringsBuilder-8       200000000            7.50 ns/op        5 B/op          0 allocs/op
    BenchmarkBytesBuffer-8          300000000            5.91 ns/op        3 B/op          0 allocs/op
    PASS
    ok      github.com/tdewolff/talks/20180821-performance  35.768s

* Benchmark comparison

Run benchmarks multiple time:

    $ go test -bench=. -benchmem >> bench.txt

Then extract statistics:

    $ benchstat bench.txt
    name        time/op
    GobEncode   13.6ms ± 1%
    JSONEncode  32.1ms ± 1%

Generate case A and case B benchmark data (eg. for a new commit)

    $ benchstat old.txt new.txt
    name        old time/op  new time/op  delta
    GobEncode   13.6ms ± 1%  11.8ms ± 1%  -13.31% (p=0.016 n=4+5)
    JSONEncode  32.1ms ± 1%  31.8ms ± 1%     ~    (p=0.286 n=4+5)


* PProf

    $ go test -bench=. -benchmem -cpuprofile=cpu -memprofile=mem

    $ go tool pprof foo.test cpu
    $ go tool pprof -alloc_space foo.test mem

* PProf CPU

    $ go tool pprof foo.test cpu
	File: 20180821-performance.test
	Type: cpu
	Time: Aug 14, 2018 at 5:56pm (NZST)
	Duration: 39.64s, Total samples = 59.30s (149.61%)
	Entering interactive mode (type "help" for commands, "o" for options)

	(pprof) top10
	Showing nodes accounting for 45900ms, 77.40% of 59300ms total
	Dropped 136 nodes (cum <= 296.50ms)
	Showing top 10 nodes out of 104
		flat  flat%   sum%        cum   cum%
	26050ms 43.93% 43.93%    26050ms 43.93%  runtime.memmove
		6930ms 11.69% 55.62%     8980ms 15.14%  runtime.scanobject
		3380ms  5.70% 61.32%     3380ms  5.70%  runtime.futex
		2350ms  3.96% 65.28%     2350ms  3.96%  runtime.procyield
		1360ms  2.29% 67.57%     1360ms  2.29%  runtime.heapBitsForObject
		1360ms  2.29% 69.87%     1830ms  3.09%  runtime.scanblock
		1250ms  2.11% 71.97%     1280ms  2.16%  runtime.greyobject
		1210ms  2.04% 74.01%     1980ms  3.34%  bytes.(*Buffer).WriteString
		1050ms  1.77% 75.78%     1050ms  1.77%  runtime.memclrNoHeapPointers
		960ms  1.62% 77.40%     2210ms  3.73%  runtime.sweepone

* PProf CPU

	(pprof) list 2018
	Total: 59.30s
	ROUTINE ======================== github.com/tdewolff/talks/20180821-performance.BenchmarkStrings in /people/tdew803/go/src/github.com/tdewolff/talks/20180821-performance/strings_test.go
		630ms     34.02s (flat, cum) 56.77% of Total
			.          .      9:func BenchmarkStrings(b *testing.B) {
			.          .     10:    s := ""
		 30ms       30ms     11:    for i := 0; i < b.N; i++ {
			.     29.17s     12:        s += "x"
			.          .     13:    }
			.          .     14:}
			.          .     15:
			.          .     16:func BenchmarkStringsBuilder(b *testing.B) {
			.          .     17:    s := strings.Builder{}
		150ms      150ms     18:    for i := 0; i < b.N; i++ {
		120ms         2s     19:        s.WriteString("x")
			.          .     20:    }
			.          .     21:}
			.          .     22:
			.          .     23:func BenchmarkBytesBuffer(b *testing.B) {
			.          .     24:    s := bytes.Buffer{}
		190ms      190ms     25:    for i := 0; i < b.N; i++ {
		140ms      2.12s     26:        s.WriteString("x")
			.          .     27:    }
			.          .     28:}

* PProf CPU

	(pprof) web

.image assets/pprof-web.png _ 600

* PProf memory
    
	$ go tool pprof -alloc_space foo.test mem
	File: 20180821-performance.test
	Type: alloc_space
	Time: Aug 14, 2018 at 5:56pm (NZST)
	Entering interactive mode (type "help" for commands, "o" for options)

	(pprof) top10
	Showing nodes accounting for 575.53GB, 99.53% of 578.27GB total
	Dropped 19 nodes (cum <= 2.89GB)
		flat  flat%   sum%        cum   cum%
	575.53GB 99.53% 99.53%   575.53GB 99.53%  github.com/tdewolff/talks/20180821-performance.BenchmarkStrings
			0     0% 99.53%   578.27GB   100%  testing.(*B).launch
			0     0% 99.53%   578.27GB   100%  testing.(*B).runN

* PProf memory

	(pprof) web

.image assets/pprof-web-mem.png _ 800


* Escape analysis

.code escape.go


* Escape analysis

    $ go run -gcflags='-l -m -m' escape.go
    # command-line-arguments
    ./escape.go:5:17: []int literal escapes to heap
    ./escape.go:5:17:   from ~r0 (return) at ./escape.go:5:5
    ./escape.go:5:28: &f escapes to heap
    ./escape.go:5:28:   from ~r1 (return) at ./escape.go:5:5
    ./escape.go:4:5: moved to heap: f
 

    $ go run -gcflags '-S' escape.go
    ...
    0x0028 00040 (escape.go:4)    CALL    runtime.newobject(SB)
    ...

* Escape analysis

    $ go test escape_test.go -gcflags='-l' -bench=. -benchmem
    goos: linux
    goarch: amd64
    BenchmarkF-8    100000000           14.5 ns/op         8 B/op          1 allocs/op
    BenchmarkG-8    2000000000           0.97 ns/op        0 B/op          0 allocs/op
    PASS
    ok      command-line-arguments  3.521s
 

    $ go tool pprof -alloc_space escape.test mem_escape
    (pprof) list .
    ...
           .          .      5:func f() *int {
    752.51MB   752.51MB      6:    i := 6
           .          .      7:    return &i
           .          .      8:}
    ...

* Function inlining

From

    func f(i int) int {
        return i + 3
    }

    func main() {
        i := f(2) * f(3)
    }

To

    func main() {
        i := (2 + 3) * (3 + 3)
    }

* Function inlining

.code inline.go

* Function inlining

    $ go run -gcflags='-m' inline.go 
    # command-line-arguments
    ./inline.go:5:6: can inline min
    ./inline.go:15:21: inlining call to min
    ...
 

    $ go run -gcflags='-m -l=4' inline.go 
    # command-line-arguments
    ./inline.go:5:6: can inline min
    ./inline.go:15:21: inlining call to min
    ./inline.go:20:6: can inline main
    ...
 
* Function inlining

    type Lexer struct {
		buf   []byte
		pos   int // index in buf
	}

	// function will not be inlined
	func (z *Lexer) Peek(pos int) byte {
		pos += z.pos
		if pos >= len(z.buf) {
			z.readMore() // expensive!
		}
		return z.buf[pos]
	}

* Bounds check elimination

Compile will convert

    c := buf[pos]

into

    if pos < 0 || pos >= len(buf) {
        panic("runtime error: index out of range")
    }
    c := buf[pos]


* Bounds check elimination
	
	func (z *Lexer) Peek(pos int) byte {
		if pos >= len(z.buf) {
			return 0
		}
		return z.buf[pos] // bounds check!
	}

* Bounds check elimination

.code bce1.go

    $ go run -gcflags='-d=ssa/check_bce/debug=1' bce1.go 
    # command-line-arguments
    ./bounds.go:6:11: Found IsInBounds
    ./bounds.go:7:11: Found IsInBounds
    ./bounds.go:8:11: Found IsInBounds
    ./bounds.go:9:11: Found IsInBounds
    [4 3 2 1]

* Bounds check elimination

.code bce2.go

    $ go run -gcflags='-d=ssa/check_bce/debug=1' bce2.go 
    # command-line-arguments
    ./bounds.go:6:11: Found IsInBounds
    [4 3 2 1]

* Bounds check elimination

    a := k[0]
	b := k[1]
 

	0x0021 00033 (bce1.go:3)	MOVQ	"".k+72(SP), AX  // AX = k.len
	0x0026 00038 (bce1.go:4)	TESTQ   AX, AX
	0x0029 00041 (bce1.go:4)	JLS     223              // AX <= 0
	0x002f 00047 (bce1.go:4)	MOVQ	"".k+64(SP), CX  // CX = k.data
	0x0034 00052 (bce1.go:4)	MOVQ	(CX), DX         // DX = CX[0]
	0x0037 00055 (bce1.go:5)	CMPQ	AX, $1           // AX <= 1
	0x003b 00059 (bce1.go:5)	JLS     216
	0x0041 00065 (bce1.go:5)    MOVQ    8(CX), BX        // BX = CX[1]
	...
	0x0059 00089 (bce1.go:7)	MOVQ	DX, "".a+40(SP)  // a = DX
	0x005e 00094 (bce1.go:7)	MOVQ	BX, "".b+32(SP)  // b = BX
	...
	0x00d1 00216 (bce1.go:6)    CALL    runtime.panicindex(SB)
	0x00d1 00223 (bce1.go:6)    CALL    runtime.panicindex(SB)
 

* Bounds check elimination

    BenchmarkBoundsA-8      2000000000           0.61 ns/op
    BenchmarkBoundsB-8      2000000000           0.49 ns/op

Difference = 0.12 ns

Takes 0.04 ns per bounds check


* Conclusion

Performance issues? Measure it!

- Benchmarks
- PProf analysis
- Escape and inlining analysis
- Bounds check elimination
- ASM output
